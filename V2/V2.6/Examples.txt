/* First example
	states->push_back(0);
	states->push_back(6);
	states->push_back(2);
	states->push_back(5);
	states->push_back(3);

	for (unsigned int i = 0; i < states->size(); ++i){
		transitions->push_back(vector<Fraction>());
		for (unsigned int j = 0; j < states->size(); ++j){
			(*transitions)[i].push_back(-1);
		}
	}
	(*transitions)[1][3] = 1;
	(*transitions)[1][4] = 5;
	(*transitions)[2][1] = 1;
	(*transitions)[3][0] = 3;
	(*transitions)[3][4] = 1;
	(*transitions)[4][0] = 1;
	(*transitions)[4][2] = 2;

	owners->push_back(1);
	owners->push_back(1);
	owners->push_back(0);
	owners->push_back(0);
	owners->push_back(1);


	for (unsigned int i = 0; i < transitions->size(); ++i){
		resets->push_back(vector<bool>());
		for (unsigned int j = 0; j < (*transitions)[i].size(); ++j)
			(*resets)[i].push_back(false);
	}

	//    (*resets)[1][4] = true;

	for (unsigned int i = 0; i < transitions->size(); ++i){
		startsCstraints->push_back(vector<unsigned int>());
		endsCstraints->push_back(vector<unsigned int>());
		for (unsigned int j = 0; j < (*transitions)[i].size(); ++j){
			(*startsCstraints)[i].push_back(-1);
			(*endsCstraints)[i].push_back(-1);
		}

	}
	(*startsCstraints)[1][3] = 1;
	(*endsCstraints)[1][3] = 5;
	(*startsCstraints)[1][4] = 0;
	(*endsCstraints)[1][4] = 2;
	(*startsCstraints)[2][1] = 1;
	(*endsCstraints)[2][1] = 3;
	(*startsCstraints)[3][0] = 0;
	(*endsCstraints)[3][0] = 5;
	(*startsCstraints)[3][4] = 4;
	(*endsCstraints)[3][4] = 4;
	(*startsCstraints)[4][2] = 2;
	(*endsCstraints)[4][2] = 2;
	(*startsCstraints)[4][0] = 1;
	(*endsCstraints)[4][0] = 3;

	cout << "PTG initalized" << endl;
*/

	//Second example (more interesting because solveSPTG change the strategy
		states->push_back(0);
		states->push_back(2);
		states->push_back(5);
		states->push_back(1);
		states->push_back(2);
		states->push_back(3);

		for (unsigned int i = 0; i < states->size(); ++i){
			transitions->push_back(vector<Fraction>());
			for (unsigned int j = 0; j < states->size(); ++j){
				(*transitions)[i].push_back(-1);
			}
		}
		(*transitions)[1][4] = 2;
		(*transitions)[2][1] = 3;
		(*transitions)[2][5] = 1;
		(*transitions)[3][0] = 1;
		(*transitions)[4][3] = 2;
		(*transitions)[4][0] = 0;
		(*transitions)[5][4] = 1;
		(*transitions)[5][0] = 2;

		owners->push_back(1);
		owners->push_back(1);
		owners->push_back(1);
		owners->push_back(1);
		owners->push_back(0);
		owners->push_back(0);



		for (unsigned int i = 0; i < states->size(); ++i){
			resets->push_back(vector<bool>());
			for (unsigned int j = 0; j < states->size(); ++j)
				(*resets)[i].push_back(false);
		}


		for (unsigned int i = 0; i < transitions->size(); ++i){
			startsCstraints->push_back(vector<unsigned int>());
			endsCstraints->push_back(vector<unsigned int>());
			for (unsigned int j = 0; j < (*transitions)[i].size(); ++j){
				(*startsCstraints)[i].push_back(-1);
				(*endsCstraints)[i].push_back(-1);
			}

		}

		(*startsCstraints)[1][4] = 0;
		(*endsCstraints)[1][4] = 3;
		(*startsCstraints)[2][1] = 0;
		(*endsCstraints)[2][1] = 1;
		(*startsCstraints)[2][5] = 2;
		(*endsCstraints)[2][5] = 3;
		(*startsCstraints)[3][0] = 0;
		(*endsCstraints)[3][0] = 3;
		(*startsCstraints)[4][3] = 1;
		(*endsCstraints)[4][3] = 3;
		(*startsCstraints)[4][0] = 2;
		(*endsCstraints)[4][0] = 2;
		(*startsCstraints)[5][4] = 1;
		(*endsCstraints)[5][4] = 2;
		(*startsCstraints)[5][0] = 0;
		(*endsCstraints)[5][0] = 3;

		(*resets)[4][3] = true;
		nbResets = 1;
		
		//Third example
		
			states->push_back(0);
	states->push_back(1);
	states->push_back(3);
	states->push_back(1);
	states->push_back(3);

	for (unsigned int i = 0; i < states->size(); ++i){
		transitions->push_back(vector<Fraction>());
		for (unsigned int j = 0; j < states->size(); ++j){
			(*transitions)[i].push_back(-1);
		}
	}
	(*transitions)[1][2] = 2;
	(*transitions)[1][3] = 1;
	(*transitions)[2][0] = 5;
	(*transitions)[2][3] = 0;
	(*transitions)[3][0] = 1;
	(*transitions)[3][4] = 3;
	(*transitions)[4][1] = 2;

	owners->push_back(1);
	owners->push_back(0);
	owners->push_back(1);
	owners->push_back(0);
	owners->push_back(1);



	for (unsigned int i = 0; i < states->size(); ++i){
		resets->push_back(vector<bool>());
		for (unsigned int j = 0; j < states->size(); ++j)
			(*resets)[i].push_back(false);
	}


	for (unsigned int i = 0; i < transitions->size(); ++i){
		startsCstraints->push_back(vector<unsigned int>());
		endsCstraints->push_back(vector<unsigned int>());
		for (unsigned int j = 0; j < (*transitions)[i].size(); ++j){
			(*startsCstraints)[i].push_back(-1);
			(*endsCstraints)[i].push_back(-1);
		}

	}

	(*startsCstraints)[1][2] = 1;
	(*endsCstraints)[1][2] = 2;
	(*startsCstraints)[1][3] = 0;
	(*endsCstraints)[1][3] = 2;
	(*startsCstraints)[2][0] = 0;
	(*endsCstraints)[2][0] = 1;
	(*startsCstraints)[2][3] = 1;
	(*endsCstraints)[2][3] = 2;
	(*startsCstraints)[3][0] = 0;
	(*endsCstraints)[3][0] = 2;
	(*startsCstraints)[3][4] = 0;
	(*endsCstraints)[3][4] = 2;
	(*startsCstraints)[4][1] = 0;
	(*endsCstraints)[4][1] = 2;


	(*resets)[4][1] = true;
	(*resets)[2][3] = true;

	nbResets = 2;